/*
Este exerc칤cio ser치 um pouquinho diferente dos anteriores.

Seu desafio 칠 desenvolver uma vers칚o do quiz que:

- Aborda um tema diferente (n칚o pode ser de filmes);
- Tem um tema de cores diferente do que foi apresentado na aula;
- Exibe na tela a pontua칞칚o que o usu치rio fez. N칚o h치 certo ou errado, apenas fa칞a. Essa exibi칞칚o de pontos 칠 uma das implementa칞칫es que faremos na pr칩xima aula =D

Independente se voc칡 j치 fez o quiz dos filmes enquanto acompanhava a aula, tente fazer esse exerc칤cio sem rever partes da aula.

칄 importante que a sua vers칚o do quiz seja feita apenas com o conte칰do que vimos at칠 aqui.

Depois de fazer o que foi pedido acima, crie um reposit칩rio no GitHub para a sua aplica칞칚o e abra uma issue no reposit칩rio do curso com:

- O link da sua vers칚o do quiz;
- Quais foram as suas maiores d칰vidas ou dificuldades durante a execu칞칚o desse exerc칤cio;
- Quais foram as suas menores dificuldades durante a execu칞칚o desse exerc칤cio.

Link do reposit칩rio do curso: https://github.com/roger-melo-treinamentos/curso-de-js-roger-melo/issues

Ps: se voc칡 n칚o conseguiu fazer tudo o que foi pedido acima, abra a issue mesmo assim =)
Ps2: o uso do Bootstrap (ou qualquer outra lib CSS) 칠 opcional.
*/

//==> RESOLU칂츾O DO EXERC칈CIO 19 游녢 <==

// const form = document.querySelector('.quiz-form');
// const finalResult = document.querySelector('.result');

// const correctAnswers = ['B', 'B', 'B', 'B'];

// form.addEventListener('submit', event => {
//     event.preventDefault();

//     let score = 0;

//     //--> obt칠m as respostas do usu치rio <--
//     const userAnswers = [
//         form.inputQuestion1.value,
//         form.inputQuestion2.value,
//         form.inputQuestion3.value,
//         form.inputQuestion4.value,
//     ];

//     //--> calcula a pontua칞칚o do usu치rio <--
//     userAnswers.forEach((userAnswer, index) => {
//         if (userAnswer === correctAnswers[index]) {
//             score += 25;
//         }
//     });

//     //--> exibe a pontua칞칚o final <--
//     scrollTo(0, 0);

//     finalResult.classList.remove('d-none');

//     //--> anima a pontua칞칚o final <--
//     let counter = 0;

//     const timer = setInterval(() => {
//         if (counter === score) {
//             clearInterval(timer);
//         }

//         finalResult.querySelector('span').textContent = `${counter}%`;
//         counter++;
//     }, 10);
// });

// ---###---###---###---###---###---###---###---###---###---###---

//==> RESOLU칂츾O DO EXERC칈CIO 20 e 21 游녢 <==

const form = document.querySelector('.quiz-form');
const finalScoreContainer = document.querySelector('.final-score-container'); // armazena uma div, da칤 container
//a classe final-score-container tem muito mais sem칙ntica do que a classe apenas result, como era no c칩digo HTML original

let score = 0; // saiu de dentro da fun칞칚o pra que possa ter escopo global agora

const correctAnswers = ['B', 'B', 'B', 'B'];

// EXERC칈CIO 21:
// REFATORA칂츾O DA FUN칂츾O COM MAP, e simplifica칞칚o do c칩digo e returns
const getUserAnswers = () =>
    correctAnswers.map((_, index) => form[`inputQuestion${index + 1}`].value);

// const getUserAnswers = () => {
//     const userAnswers = [];

//     correctAnswers.forEach((_, index) => {
//         // uso do underscore no lugar do correctAnswer que n칚o estava sendo utilizado
//         const userAnswer = form[`inputQuestion${index + 1}`].value;
//         userAnswers.push(userAnswer);
//     });

//     //------------------

//     // const userAnswers = [
//     //     form.inputQuestion1.value,
//     //     form.inputQuestion2.value,
//     //     form.inputQuestion3.value,
//     //     form.inputQuestion4.value,
//     // ];

//     return userAnswers;
// };

// Essa fun칞칚o n칚o dever치 ser refatorada com uso do reduce, pois ela, a fun칞칚o est치 gerando um efeito colateral, que 칠 a mudan칞a de valor da let score, que foi declarada fora da fun칞칚o
const calculateUserScore = userAnswers => {
    // recebe um par칙metro
    userAnswers.forEach((userAnswer, index) => {
        const isUserAnswerCorrect = userAnswer === correctAnswers[index];
        if (isUserAnswerCorrect) {
            score += 25;
        }
    });
};

const showFinalScore = () => {
    // scrollTo(0, 0);

    // passar coordenadas como objeto pra que a rolagem seja mais suave com o behavior: 'smooth'
    scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth',
    });

    finalScoreContainer.classList.remove('d-none');
};

const animateFinalScore = () => {
    let counter = 0;

    const timer = setInterval(() => {
        if (counter === score) {
            clearInterval(timer); // As linhas logo abaixo do bloco de c칩digo ser칚o ainda executadas, a n칚o ser que coloquemos um return dentro desse if
            // return // caso queiramos que o c칩digo logo abaixo n칚o seja executado
        }

        finalScoreContainer.querySelector('span').textContent = `${counter}%`;
        counter++;
    }, 10);
};

const resetUserScore = () => {
    score = 0;
};

// A refatora칞칚o consiste em isolar o c칩digo em fun칞칫es de responsabilidade 칰nica,observar se precisa receber algo como par칙metro / argumento e se as vari치veis est칚o acess칤veis no escopo global ou da fun칞칚o mesmo, depois invocar o bloco de c칩digo quando necess치rio
// Ap칩s a refatora칞칚o devo apagar os coment치rio que usamos pra nos auxiliar, deixando assim o c칩digo mais enxuto, j치 que agora o nome das const e fun칞칫es j치 ter칚o sem칙ntica suficiente pra que todos saibam o que cada um faz

form.addEventListener('submit', event => {
    event.preventDefault();

    // score = 0; // 칠 necess치rio fazer essa atribui칞칚o de 0 a score, para que o valor volte a zero toda vez que o evento de submit for disparado, vamos fazer com a invoca칞칚o de uma fun칞칚o que criamos pra zerar o valor da let score pra manter o padr칚o de escrita do c칩digo
    resetUserScore();

    // let score = 0; // passar a let score pro escopo global pra poder ser usada dentro da fun칞칚o calculateUserScore

    //--> obt칠m as respostas do usu치rio <--
    const userAnswers = getUserAnswers();

    //--> calcula a pontua칞칚o do usu치rio <--
    calculateUserScore(userAnswers); // na invoca칞칚o 칠 que recebe userAnswers como argumento, aqui mesmo escopo da userAnswers

    //--> exibe a pontua칞칚o final <--
    showFinalScore();

    //--> anima a pontua칞칚o final <--
    animateFinalScore();
});
